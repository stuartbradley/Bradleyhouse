@page "/ShoppingLists"
@using BradleyHouse.Components.Dialogs.Models.Food
@using BradleyHouse.Data.Models.MealPrep
@using BradleyHouse.Data.ViewModels
@using Microsoft.EntityFrameworkCore
@using Weekly_Shopping.Data

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudGrid Spacing="2">

        @foreach(var list in _shoppingLists)
        {
            <MudItem md="3" xs="12" >
                <MudCard Style="height:100%">
                <MudCardHeader>
                    <CardHeaderContent>
                            <MudText Align="Align.Center" Typo="Typo.body1">@list.Title</MudText>
                    </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" OnClick="() => shoppingListSelected(list.Id)" Color="Color.Primary" Size="Size.Large" /> 
                            <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline" OnClick="() => deleteShoppingList(list.Id)" Color="Color.Primary" Size="Size.Large" />
                        </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                <MudList T="string">
                @foreach(var meal in list.Meals)
                {
                    <MudListItem T="string" Text="@meal.Name" Icon="@Icons.Custom.Uncategorized.FoodApple" OnClick="() => ShowIngredientList(meal.Id)" />
                }
                </MudList>
            </MudCardContent>
            </MudCard>
        </MudItem>
        }    
        </MudGrid>
</MudContainer>


@code {
    [Inject]
    MealPlannerContext MealPlannerContext{ get; set; }

    private List<ShoppingListViewModel> _shoppingLists = new();

    [Inject]
    NavigationManager Navigation { get; set; }

    [Inject]
    IDialogService DialogService{ get; set; }

    protected async override Task OnInitializedAsync()
    {
        var allShoppingLists = await MealPlannerContext.ShoppingList.Include(x => x.Meals).Include(x => x.Ingredients).Take(4).ToListAsync();

        foreach(var list in allShoppingLists)
        {
            var shoppingList = new ShoppingListViewModel();
            shoppingList.Id = list.Id;
            shoppingList.Title = list.DateCreated.ToShortDateString();
            foreach(var meal in list.Meals)
            {
                var selectedMeal = await MealPlannerContext.Meals.SingleAsync(x => x.Id == meal.MealId);
                shoppingList.Meals.Add(new ShoppingListMealViewModel()
                    {
                        Id = meal.MealId,
                        Name = selectedMeal.Name,
                    });
            }
            _shoppingLists.Add(shoppingList);
        }
    }

    private void shoppingListSelected(int id)
    {
        Navigation.NavigateTo($"ShoppingList/{id}");
    }

    private async Task ShowIngredientList(int id)
    {
        var meal = await MealPlannerContext.Meals.Include(x => x.Ingredients).ThenInclude(x => x.Food).SingleAsync(x => x.Id == id);
        var parameters = new DialogParameters<ViewIngredients> { { x => x.Ingredients, meal.Ingredients }, { x => x.MealName, meal.Name }, { x => x.RecipeURL, meal.RecipeUrl } };

        DialogOptions dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, Position = DialogPosition.Center, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ViewIngredients>("Ingredients", parameters, dialogOptions);
    }

    private async Task deleteShoppingList(int id)
    {
        var shoppingList = await MealPlannerContext.ShoppingList.Include(x => x.Meals).Include(x => x.Ingredients).SingleAsync(x => x.Id == id);
        MealPlannerContext.ShoppingListIngredients.RemoveRange(shoppingList.Ingredients);
        MealPlannerContext.ShoppingListMeals.RemoveRange(shoppingList.Meals);

        MealPlannerContext.ShoppingList.Remove(shoppingList);

        await MealPlannerContext.SaveChangesAsync();
        _shoppingLists.RemoveAll(x => x.Id == shoppingList.Id);
    }


} 
