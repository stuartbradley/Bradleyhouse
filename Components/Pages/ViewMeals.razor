@page "/ViewMeals"

@using BradleyHouse.Components.Dialogs.Models.Food
@using BradleyHouse.Data.Models.MealPrep
@using Microsoft.EntityFrameworkCore
@using Weekly_Shopping.Data
@using Weekly_Shopping.Data.ViewModels
@inject ViewMealsViewModel ViewModel
@inject IDialogService DialogService


@if (ViewModel.FilteredList == null)
{
    <MudProgressCircular Color="Color.Primary" Style="height:100%;width:100%;" Indeterminate="true" />

}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudItem xs="12" sm="6" md="4" Class="mb-4">
            <MudTextField ShrinkLabel T="string" Immediate="true" ValueChanged="ViewModel.searchChanged" Label="Search" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4" Class="mb-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ViewModel.CreateShoppingList">Create Shopping List</MudButton>
            </MudItem>
        <MudItem xs="12" sm="6" md="4" Class="mb-4">
                <MudSlider Min="1" Max="12" @bind-Value="@ViewModel.Servings" Color="Color.Info">Servings: @ViewModel.Servings</MudSlider>
            </MudItem>
        <MudGrid Spacing="2">
            @foreach (var meal in ViewModel.FilteredList)
            {
                <MudItem xs="12" md="4" lg="3" Class="d-flex justify-center">
                    <MudCard Outlined="true" Class="border-4 mx-5 d-flex flex-column justify-space-between" Style="min-width:100%; min-height:200px;">
                        <MudCardHeader >
                            <CardHeaderContent>
                                @if(meal.StockCount > 0)
                                {
                                   
                                    <MudText Align="Align.Center" Typo="Typo.h6">@meal.Name (@meal.StockCount)</MudText>
                                    <MudCheckBox @bind-Checked="@meal.Selected" />
                                }
                                else
                                {
                                    <div class="d-flex justify-center align-center gap-2">
                                        <MudText Align="Align.Center" Typo="Typo.h6">@meal.Name</MudText>
                                        <MudCheckBox @bind-Checked="@meal.Selected" />
                                    </div>

                                }
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudCardActions Class="d-flex justify-space-between">
                                <MudIconButton OnClick="() => ViewModel.deleteMeal(meal.Id)" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" />
                                <MudIconButton OnClick="() => meal.addOneToStock()" Icon="@Icons.Material.Filled.PlusOne" Color="Color.Default" />
                                 @if(meal.StockCount > 0){
                                    <MudIconButton OnClick="() => meal.removeOneFromStock()" Icon="@Icons.Material.Filled.Remove" Color="Color.Default" />
                                 }
                                 <MudIconButton OnClick="(e) => openIngredients(meal)" Icon="@Icons.Custom.Uncategorized.FoodApple" Color="Color.Default" />
                            </MudCardActions>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>
}

@code{

    private async Task openIngredients(MealModel model)
    {
        var parameters = new DialogParameters<ViewIngredients> { { x => x.Ingredients, model.Ingredients.ToList() }, { x => x.MealName, model.Name} };


        DialogOptions dialogOptions = new DialogOptions() { CloseOnEscapeKey = true,Position = DialogPosition.Center, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ViewIngredients>("Ingredients",parameters ,dialogOptions);

    }
}